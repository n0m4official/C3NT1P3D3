#ifndef NETWORK_VULNERABILITY_DETECTOR_H
#define NETWORK_VULNERABILITY_DETECTOR_H

#include <string>
#include <vector>
#include <memory>
#include <map>

#include "IModule.h"
#include "VulnerabilityDatabase.h"

namespace C3NT1P3D3 {

struct NetworkTarget {
    std::string ip;
    int port;
    std::string service;
    std::string version;
    std::map<std::string, std::string> banner;
};

struct NetworkVulnerability {
    std::string type;
    std::string ip;
    int port;
    std::string service;
    std::string evidence;
    Severity severity;
    std::string description;
    std::string remediation;
    std::string cve_id;
};

class NetworkVulnerabilityDetector : public IModule {
public:
    NetworkVulnerabilityDetector();
    ~NetworkVulnerabilityDetector();
    
    bool initialize();
    bool scan(const std::string& target);
    void cleanup();
    std::string getName() const;
    std::string getDescription() const;
    
    // Service-Specific Detection
    std::vector<NetworkVulnerability> detectSMBVulnerabilities(const NetworkTarget& target);
    std::vector<NetworkVulnerability> detectRDPVulnerabilities(const NetworkTarget& target);
    std::vector<NetworkVulnerability> detectSSHVulnerabilities(const NetworkTarget& target);
    std::vector<NetworkVulnerability> detectFTPVulnerabilities(const NetworkTarget& target);
    std::vector<NetworkVulnerability> detectDNSVulnerabilities(const NetworkTarget& target);
    std::vector<NetworkVulnerability> detectSNMPVulnerabilities(const NetworkTarget& target);
    std::vector<NetworkVulnerability> detectSMTPVulnerabilities(const NetworkTarget& target);
    std::vector<NetworkVulnerability> detectHTTPVulnerabilities(const NetworkTarget& target);
    std::vector<NetworkVulnerability> detectTelnetVulnerabilities(const NetworkTarget& target);
    
    // Protocol-Specific Detection
    std::vector<NetworkVulnerability> detectTCPVulnerabilities(const NetworkTarget& target);
    std::vector<NetworkVulnerability> detectUDPVulnerabilities(const NetworkTarget& target);
    std::vector<NetworkVulnerability> detectICMPVulnerabilities(const NetworkTarget& target);
    
    // Advanced Network Attacks
    std::vector<NetworkVulnerability> detectMITMVulnerabilities(const NetworkTarget& target);
    std::vector<NetworkVulnerability> detectSpoofingVulnerabilities(const NetworkTarget& target);
    std::vector<NetworkVulnerability> detectReplayVulnerabilities(const NetworkTarget& target);
    
    // Network Infrastructure
    std::vector<NetworkVulnerability> detectRouterVulnerabilities(const NetworkTarget& target);
    std::vector<NetworkVulnerability> detectSwitchVulnerabilities(const NetworkTarget& target);
    std::vector<NetworkVulnerability> detectFirewallVulnerabilities(const NetworkTarget& target);
    std::vector<NetworkVulnerability> detectLoadBalancerVulnerabilities(const NetworkTarget& target);
    
    // Wireless Network Detection
    std::vector<NetworkVulnerability> detectWirelessVulnerabilities(const NetworkTarget& target);
    std::vector<NetworkVulnerability> detectWEPVulnerabilities(const NetworkTarget& target);
    std::vector<NetworkVulnerability> detectWPAWeaknesses(const NetworkTarget& target);
    
    // IoT & Embedded Devices
    std::vector<NetworkVulnerability> detectIoTVulnerabilities(const NetworkTarget& target);
    std::vector<NetworkVulnerability> detectEmbeddedVulnerabilities(const NetworkTarget& target);
    std::vector<NetworkVulnerability> detectSCADAVulnerabilities(const NetworkTarget& target);
    
    // Configuration
    void setPortScanRange(int start_port, int end_port);
    void setServiceDetection(bool enabled);
    void setVersionDetection(bool enabled);
    void setBannerGrabbing(bool enabled);
    void setTimeout(int seconds);
    void setThreads(int num_threads);
    void setRateLimit(int packets_per_second);
    
    // Results
    std::vector<NetworkVulnerability> getResults() const;
    void clearResults();
    void exportResults(const std::string& filename) const;
    
private:
    class Impl;
    std::unique_ptr<Impl> pImpl;
    
    // Helper methods
    bool isPortOpen(const std::string& ip, int port) const;
    std::string grabBanner(const std::string& ip, int port) const;
    std::string detectService(const std::string& ip, int port) const;
    std::string detectVersion(const std::string& banner, const std::string& service) const;
    
    // SMB-specific methods
    std::vector<NetworkVulnerability> checkEternalBlue(const NetworkTarget& target);
    std::vector<NetworkVulnerability> checkSMBGhost(const NetworkTarget& target);
    std::vector<NetworkVulnerability> checkSMBleeding(const NetworkTarget& target);
    
    // RDP-specific methods
    std::vector<NetworkVulnerability> checkBlueKeep(const NetworkTarget& target);
    std::vector<NetworkVulnerability> checkRDPWeakEncryption(const NetworkTarget& target);
    std::vector<NetworkVulnerability> checkRDPNLA(const NetworkTarget& target);
    
    // SSH-specific methods
    std::vector<NetworkVulnerability> checkSSHWeakAlgorithms(const NetworkTarget& target);
    std::vector<NetworkVulnerability> checkSSHWeakKeys(const NetworkTarget& target);
    std::vector<NetworkVulnerability> checkSSHBruteForce(const NetworkTarget& target);
    
    // FTP-specific methods
    std::vector<NetworkVulnerability> checkFTPAnonymous(const NetworkTarget& target);
    std::vector<NetworkVulnerability> checkFTPBounce(const NetworkTarget& target);
    std::vector<NetworkVulnerability> checkFTPCleartext(const NetworkTarget& target);
    
    // DNS-specific methods
    std::vector<NetworkVulnerability> checkDNSRecursion(const NetworkTarget& target);
    std::vector<NetworkVulnerability> checkDNSZoneTransfer(const NetworkTarget& target);
    std::vector<NetworkVulnerability> checkDNSCachePoisoning(const NetworkTarget& target);
    
    // SNMP-specific methods
    std::vector<NetworkVulnerability> checkSNMPDefaultCommunity(const NetworkTarget& target);
    std::vector<NetworkVulnerability> checkSNMPWriteAccess(const NetworkTarget& target);
};

} // namespace C3NT1P3D3

#endif // NETWORK_VULNERABILITY_DETECTOR_H
#ifndef VULNERABILITY_DATABASE_H
#define VULNERABILITY_DATABASE_H

#include "IPRangeValidator.h"
#include <string>
#include <vector>
#include <map>
#include <memory>
#include <chrono>

namespace C3NT1P3D3 {

enum class VulnerabilityType {
    // Web Application Vulnerabilities
    SQL_INJECTION,
    XSS_REFLECTED,
    XSS_STORED,
    XSS_DOM,
    CSRF,
    LFI,
    RFI,
    XXE,
    SSTI,
    IDOR,
    PATH_TRAVERSAL,
    COMMAND_INJECTION,
    LDAP_INJECTION,
    XPATH_INJECTION,
    HOST_HEADER_INJECTION,
    
    // Network Vulnerabilities
    SMB_VULNERABILITIES,
    RDP_VULNERABILITIES,
    SSH_WEAK_AUTHENTICATION,
    FTP_ANONYMOUS_ACCESS,
    DNS_MISCONFIGURATION,
    SNMP_WEAK_COMMUNITY,
    TELNET_CLEARTEXT,
    
    // SSL/TLS Vulnerabilities
    SSLV2_ENABLED,
    SSLV3_ENABLED,
    TLSV1_ENABLED,
    TLSV11_ENABLED,
    WEAK_CIPHER_SUITES,
    HEARTBLEED,
    POODLE,
    BEAST,
    CRIME,
    BREACH,
    
    // Database Vulnerabilities
    MYSQL_WEAK_PASSWORDS,
    POSTGRESQL_WEAK_PASSWORDS,
    MONGODB_UNAUTHENTICATED,
    REDIS_UNAUTHENTICATED,
    ELASTICSEARCH_UNAUTHENTICATED,
    
    // Cloud & Container Vulnerabilities
    AWS_S3_PUBLIC_BUCKET,
    AWS_IAM_MISCONFIGURATION,
    KUBERNETES_MISCONFIGURATION,
    DOCKER_API_EXPOSED,
    KUBERNETES_API_EXPOSED,
    
    // IoT & Device Vulnerabilities
    DEFAULT_CREDENTIALS,
    FIRMWARE_VULNERABILITIES,
    UNSECURED_API_ENDPOINTS,
    
    // Operating System Vulnerabilities
    ETERNALBLUE,
    BLUEKEEP,
    SHELLSHOCK,
    GHOST,
    DIRTY_COW,
    SPECTRE,
    MELTDOWN,
    
    // Application-Specific
    LOG4SHELL,
    STRUTS2_VULNERABILITIES,
    WORDPRESS_VULNERABILITIES,
    JENKINS_VULNERABILITIES,
    JBOSS_VULNERABILITIES,
    
    // Zero-day placeholders
    ZERODAY_WEB,
    ZERODAY_NETWORK,
    ZERODAY_DATABASE,
    ZERODAY_CLOUD
};

enum class Severity {
    CRITICAL,
    HIGH,
    MEDIUM,
    LOW,
    INFO
};

struct VulnerabilitySignature {
    std::string cve_id;
    std::string name;
    std::string description;
    VulnerabilityType type;
    Severity severity;
    std::vector<std::string> affected_versions;
    std::string detection_pattern;
    std::string remediation;
    std::chrono::system_clock::time_point published_date;
    std::chrono::system_clock::time_point last_updated;
    double cvss_score;
    std::vector<std::string> references;
};

class VulnerabilityDatabase {
public:
    static VulnerabilityDatabase& getInstance();
    
    void loadDatabase();
    void updateDatabase();
    std::vector<VulnerabilitySignature> getVulnerabilitiesByType(VulnerabilityType type) const;
    std::vector<VulnerabilitySignature> getVulnerabilitiesBySeverity(Severity severity) const;
    VulnerabilitySignature getVulnerabilityByCVE(const std::string& cve_id) const;
    bool isVulnerabilityKnown(const std::string& cve_id) const;
    
    void addCustomVulnerability(const VulnerabilitySignature& vuln);
    void exportDatabase(const std::string& filename) const;
    void importDatabase(const std::string& filename);
    
    size_t getTotalVulnerabilities() const;
    size_t getVulnerabilitiesByTypeCount(VulnerabilityType type) const;

private:
    VulnerabilityDatabase();
public:
    ~VulnerabilityDatabase();
private:
    
    void loadBuiltInVulnerabilities();
    void loadCVEData();
    
    std::map<std::string, VulnerabilitySignature> vulnerabilities;
    std::map<VulnerabilityType, std::vector<std::string>> vulnerabilities_by_type;
    std::map<Severity, std::vector<std::string>> vulnerabilities_by_severity;
    
    static std::unique_ptr<VulnerabilityDatabase> instance;
};

} // namespace C3NT1P3D3

#endif // VULNERABILITY_DATABASE_H
#ifndef WEB_VULNERABILITY_DETECTOR_H
#define WEB_VULNERABILITY_DETECTOR_H

#include <string>
#include <vector>
#include <memory>
#include <map>
#include <regex>

#include "VulnerabilityDatabase.h"
#include "IModule.h"

namespace C3NT1P3D3 {

struct WebTarget {
    std::string url;
    std::string method;
    std::map<std::string, std::string> headers;
    std::string body;
    int port;
    bool ssl;
};

struct WebVulnerability {
    std::string type;
    std::string url;
    std::string parameter;
    std::string evidence;
    Severity severity;
    std::string description;
    std::string remediation;
    std::string cve_id;
};

class WebVulnerabilityDetector : public IModule {
public:
    WebVulnerabilityDetector();
    ~WebVulnerabilityDetector();
    
    bool initialize();
    bool scan(const std::string& target);
    void cleanup();
    std::string getName() const;
    std::string getDescription() const;
    
    // OWASP Top 10 Detection
    std::vector<WebVulnerability> detectSQLInjection(const WebTarget& target);
    std::vector<WebVulnerability> detectXSS(const WebTarget& target);
    std::vector<WebVulnerability> detectCSRF(const WebTarget& target);
    std::vector<WebVulnerability> detectBrokenAccessControl(const WebTarget& target);
    std::vector<WebVulnerability> detectSecurityMisconfiguration(const WebTarget& target);
    std::vector<WebVulnerability> detectSensitiveDataExposure(const WebTarget& target);
    std::vector<WebVulnerability> detectInsufficientLogging(const WebTarget& target);
    
    // Advanced Web Vulnerabilities
    std::vector<WebVulnerability> detectLFI(const WebTarget& target);
    std::vector<WebVulnerability> detectRFI(const WebTarget& target);
    std::vector<WebVulnerability> detectXXE(const WebTarget& target);
    std::vector<WebVulnerability> detectSSTI(const WebTarget& target);
    std::vector<WebVulnerability> detectIDOR(const WebTarget& target);
    std::vector<WebVulnerability> detectPathTraversal(const WebTarget& target);
    std::vector<WebVulnerability> detectCommandInjection(const WebTarget& target);
    std::vector<WebVulnerability> detectLDAPInjection(const WebTarget& target);
    std::vector<WebVulnerability> detectXPathInjection(const WebTarget& target);
    std::vector<WebVulnerability> detectHostHeaderInjection(const WebTarget& target);
    
    // SSL/TLS Configuration
    std::vector<WebVulnerability> detectSSLIssues(const WebTarget& target);
    std::vector<WebVulnerability> detectWeakSSLVersions(const WebTarget& target);
    std::vector<WebVulnerability> detectWeakCipherSuites(const WebTarget& target);
    std::vector<WebVulnerability> detectCertificateIssues(const WebTarget& target);
    
    // API Security
    std::vector<WebVulnerability> detectAPIVulnerabilities(const WebTarget& target);
    std::vector<WebVulnerability> detectGraphQLIssues(const WebTarget& target);
    std::vector<WebVulnerability> detectRESTIssues(const WebTarget& target);
    
    // Configuration
    void setUserAgent(const std::string& ua);
    void setTimeout(int seconds);
    void setThreads(int num_threads);
    void setRateLimit(int requests_per_second);
    
    // Results
    std::vector<WebVulnerability> getResults() const;
    void clearResults();
    void exportResults(const std::string& filename) const;
    
private:
    class Impl;
    std::unique_ptr<Impl> pImpl;
    
    // Helper methods
    std::vector<std::string> extractForms(const std::string& html) const;
    std::vector<std::string> extractParameters(const std::string& url) const;
    std::string normalizeURL(const std::string& url) const;
    bool isValidURL(const std::string& url) const;
    
    // Payload generators
    std::vector<std::string> generateSQLInjectionPayloads() const;
    std::vector<std::string> generateXSSPayloads() const;
    std::vector<std::string> generateCommandInjectionPayloads() const;
    std::vector<std::string> generatePathTraversalPayloads() const;
    
    // Response analyzers
    bool isSQLInjectionResponse(const std::string& response) const;
    bool isXSSResponse(const std::string& response) const;
    bool isCommandInjectionResponse(const std::string& response) const;
    bool isPathTraversalResponse(const std::string& response) const;
};

} // namespace C3NT1P3D3

#endif // WEB_VULNERABILITY_DETECTOR_H